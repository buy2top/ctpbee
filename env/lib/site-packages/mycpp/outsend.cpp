#include"jy.h"
#include "getconfig.h"
#include <synchapi.h>
#include <cstring>
#include<regex>
#include<pybind11/pybind11.h>

using namespace std;
char* marstr = new char[256];
char* comstr = new char[256];
char* inst = new char[256];
char* prod = new char[256];
char* mktdepth = new char[256];
bool bmktdepth = false;

JyAPi* td = new JyAPi;

string JyAddr = getConfig("config", "FrontAddr");
string HqAddr = getConfig("config", "FrontMdAddr");
string BrokerID = getConfig("config", "BrokerID");
string UserID = getConfig("config", "UserID");
string Password = getConfig("config", "Password");
string InvestorID = getConfig("config", "InvestorID");
string UserProductInfo = getConfig("config", "UserProductInfo");
string AuthCode = getConfig("config", "AuthCode");
string AppID = getConfig("config", "AppID");

Userinfo userinfo = { BrokerID.c_str(),UserID.c_str(),Password.c_str(),InvestorID.c_str(),UserProductInfo.c_str(),AuthCode.c_str(),AppID.c_str() };

void stripnum(string &code) {
	int len = code.size();
	char* res = new char[10];
	int j = 0;
	for (int i = 0; i <= len; i++) {
		if (code[i] == '\0') {
			res[j] = code[i];
		}
		if (code[i] < '0' || code[i] > '9') {
			res[j] = code[i];
			j++;
		}

	}
	code = res;
}

void login() {
	td->setaddr((char*)JyAddr.c_str());
	td->setinfo(userinfo);
	td->connect();
	WaitForSingleObject(g_hEvent, INFINITE);
	Sleep(800);
	td->ReqAuthenticate();
	WaitForSingleObject(g_hEvent, INFINITE);
	Sleep(800);
	td->login();
	WaitForSingleObject(g_hEvent, INFINITE);
	Sleep(800);
}

char* get_margin(string code) {
	if (!td->loginstatus) {
		login();
	}
	td->ReqQryInstrumentMarginRate(code, 1);
	WaitForSingleObject(g_margin, INFINITE);
	Sleep(1000);
	CThostFtdcInstrumentMarginRateField mars = td->margindata[code];
	sprintf(marstr, "{'longbyM':%.8lf,'longbyV':%.8lf,'shortbyM':%.8lf,'shortbyV':%.8lf,'isrelative':%d}", mars.LongMarginRatioByMoney, mars.LongMarginRatioByVolume, mars.ShortMarginRatioByMoney, mars.ShortMarginRatioByVolume,mars.IsRelative);
	return  marstr;
	
}

char* get_commission(string code) {
	if (!td->loginstatus) {
		login();
	}
	td->ReqQryInstrumentCommissionRate(code, 2);
	WaitForSingleObject(g_rate, INFINITE);
	Sleep(1000);
	
	if (td->commdata.count(code)==0) {
		stripnum(code);
	}
	CThostFtdcInstrumentCommissionRateField fees = td->commdata[code];
	sprintf(comstr, "{'openbyM':%.8lf,'openbyV':%.8lf,'closebyM':%.8lf,'closebyV':%.8lf,'closetbyM':%.8lf,'closetbyV':%.8lf}", fees.OpenRatioByMoney, fees.OpenRatioByVolume, fees.CloseRatioByMoney, fees.CloseRatioByVolume, fees.CloseTodayRatioByMoney, fees.CloseTodayRatioByVolume);
	return comstr;
}

char* get_contract(string code,string exchange) {
	if (!td->loginstatus) {
		login();
	}
	td->ReqQryInstrument(code, exchange, 3);
	WaitForSingleObject(g_instrument, INFINITE);
	Sleep(1000);
	CThostFtdcInstrumentField contract = td->InstrumentField[code];
	sprintf(inst, "{'istrading':%d,'longbyM':%.8lf,'shortbyM':%.8lf}", contract.IsTrading, contract.LongMarginRatio, contract.ShortMarginRatio);
	return inst;
 //,'volumemul':%.81f,'underlyingmul':%.81f , contract.PriceTick, contract.VolumeMultiple, contract.UnderlyingMultiple
}

char* get_mktdepth(string code) {
	if (!td->loginstatus) {
		login();
	}
	if (!bmktdepth) {
		CThostFtdcQryDepthMarketDataField ask = { 0 };
		td->ReqQryDepthMarketData(&ask, 0);
		WaitForSingleObject(g_mktdepth, INFINITE);
		bmktdepth = true;
	}
	
	CThostFtdcDepthMarketDataField mktd = td->MktDepthField[code];
	sprintf(mktdepth, "{'lastprice':%.8lf,'pre_close_price':%.8lf,'pre_settle_price':%.8lf}", mktd.LastPrice,mktd.PreClosePrice, mktd.PreSettlementPrice);
	return mktdepth;
}


//char* get_product(string code) {
//	if (!td->loginstatus) {
//		login();
//	}
//	td->ReqQryProduct(code, 4);
//	WaitForSingleObject(g_product, INFINITE);
//	Sleep(1000);
//	CThostFtdcProductField product = td->ProductField[code];
//	sprintf(prod, "{'ExchangeID':%s}", product.ExchangeID);
//	return prod;
//
//}




//int main() {
//	login();
//	//string a = "ag2205";
//	string qs[] = { "MA205","m2205","al2205","ta205","rm205","al2205","al205","sm205","SM205","sm2205"};
//	//printf(get_margin("AP212.CZCE"));
//	printf("---------------\n");
//	//printf(get_margin("AP212"));
//
//	//printf(get_commission("AP212.CZCE"));
//	printf("---------------\n");
//	for (int i = 0; i <= 9; i++) {
//		string com = get_commission(qs[i]);
//		printf("%s com is :%s\n", qs[i].c_str(), com.c_str());
//	}
//
//	Sleep(INFINITE);
//	//printf("%s \n",get_margin("m2205"));
//	//printf("%s \n", get_commission("m2205"));
//	//printf("%s \n", get_contract("m2205",exchange));
//	//sleep(infinite);
//	/*printf("%s \n", get_product("ag2205"));*/
//}



PYBIND11_MODULE(mydll, m) {
	m.doc() = "pybind11 plugin";
	m.def("get_margin", &get_margin, "get_margin:args(code)");
	m.def("get_commission", &get_commission, "get_commission:args(code)");
	m.def("get_contract", &get_contract, "get_contract:args(code,exchange)");
	//m.def("get_mktdepth", &get_mktdepth, "get_mktdepth:args(code)");
}


